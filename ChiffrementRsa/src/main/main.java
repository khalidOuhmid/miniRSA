package main;

import java.math.BigInteger;

public class main {

	 public static void main(String[] args) {
	        // Cas 1 : Déchiffrement de c
	        BigInteger c = new BigInteger("38281103203726");
	        BigInteger e = new BigInteger("10077575321029");
	        BigInteger N = new BigInteger("530853526207841");

	        // Étape 1 : Factorisation de N pour obtenir p et q
	        BigInteger[] factors = RSACHALLENGE.factorizeN(N);
	        if (factors == null) {
	            System.out.println("Impossible de factoriser N.");
	        } else {
	            BigInteger p = factors[0];
	            BigInteger q = factors[1];
	            BigInteger phi = (p.subtract(BigInteger.ONE)).multiply(q.subtract(BigInteger.ONE));
	            BigInteger d = RSACHALLENGE.modInverse(e, phi);
	            BigInteger message = RSACHALLENGE.decrypt(c, d, N);
	            System.out.println("Message déchiffré pour le premier cas : " + message);
	        }

	        // Cas 2 : Utilisation de facteur commun
	        BigInteger e1 = new BigInteger("26785832386800035826339777425668124479348797778011322626401058311876939193076811798734797122233232195801023759353363356099631695218646165525323516593397960877442456608428175738071974787938720926390041873990045003636550010288642994820185604874217122098095468237069572971528201686684711606824700336979494412279");
	        BigInteger N1 = new BigInteger("65120587096250103183001833383789203518437667229504751778838320844946671359628914823370779289996336532761066703287238827452153399495442250548909790114271792788891210158675324972801302361679825712184074889868533903729644947074283656378569705222865209160145024233809141469298580089151423820798875384522880838197");
	        BigInteger c1 = new BigInteger("49496314233264952578973426386347014525820134727937768038424814882246079259541075102462566388903146020317003915500357076800562305470217122338681483277708491509816201247086119210070032389346001980202638057752756580971611680439961197375131451596801291721873856930701954426471264039289903183189295978183330111024");        
	        BigInteger e2 = new BigInteger("6399057062450035971685133486388415110060041617819664697766982427746576877166994102892385467888624348629131686693910359714961152607092182090742733930850077335325779375811409324849353151872331095971108338562861194311793240868084619244134329612373165290997950938952479216978293036481111033379813117182178973735");
	        BigInteger N2 = new BigInteger("56652331859744900719160194994408433331545397689163776204121560256814132600042206371223919830438631779963647472737962196080861990595789031305075714280164076664841952916807813251075917750384956767954731311896549499977244787511800123535052403205749041401231043533166933952042742333420930043730493721376980249971");
	        BigInteger c2 = new BigInteger("4937907616356238999981521224651402488563259184621268709037499403832816826127254459047792319380323542065520573653761338371190223672755885425797794091991965046654711339145995416882072481553275549580614937164605870282987401112425309536379927117571981222712817148414273679094665036536761026123696901467223371996");

	        // Calcul du PGCD pour trouver le facteur commun
	        BigInteger p_common = RSACHALLENGE.gcd(N1, N2);
	        if (!p_common.equals(BigInteger.ONE)) {
	            BigInteger q1 = N1.divide(p_common);
	            BigInteger q2 = N2.divide(p_common);
	            BigInteger phi1 = (p_common.subtract(BigInteger.ONE)).multiply(q1.subtract(BigInteger.ONE));
	            BigInteger phi2 = (p_common.subtract(BigInteger.ONE)).multiply(q2.subtract(BigInteger.ONE));
	            BigInteger d1 = RSACHALLENGE.modInverse(e1, phi1);
	            BigInteger d2 = RSACHALLENGE.modInverse(e2, phi2);
	            BigInteger message1 = Chiffrement.decrypt(c1, d1, N1);
	            BigInteger message2 = Chiffrement.decrypt(c2, d2, N2);
	            System.out.println("Message déchiffré pour c1 : " + message1);
	            System.out.println("Message déchiffré pour c2 : " + message2);
	        } else {
	            System.out.println("Aucun facteur commun trouvé entre N1 et N2.");
	        }
	    }
	}

	


